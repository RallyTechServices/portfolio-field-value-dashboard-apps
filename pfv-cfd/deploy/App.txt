<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Cumulative Flow</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Feb 29 2016 20:08:29 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Feb 29 2016 20:08:29 GMT-0700 (MST)";
        var CHECKSUM = 36223252801;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('Rally.technicalservices.common.DashboardFilter',{


    filterModelType: undefined,
    filterField: undefined,
    filterValue: undefined,

    getFilter: function(resultsRecordType, portfolioItemTypes){

        portfolioItemTypes = portfolioItemTypes || [];
        resultsRecordType = resultsRecordType || this.filterModelType;

        var modelType = this.filterModelType.toLowerCase(),
            pi_types = portfolioItemTypes.length > 0 ? _.map(portfolioItemTypes, function(pi){return pi.typePath.toLowerCase()}) : [],
            idx = _.indexOf(pi_types, modelType),
            type_idx = _.indexOf(pi_types, resultsRecordType.toLowerCase());
        console.log('idx', idx,type_idx);
        if (type_idx < idx) {
            var properties = [];
            for (var i = type_idx; i < idx; i++) {
                if (i < 0) {
                    properties.push("PortfolioItem");
                } else {
                    properties.push('Parent');
                }
            }
            properties.push(this._getFilterFieldProperty())
            return Ext.create('Rally.data.wsapi.Filter', {
                property: properties.join('.'),
                value: this.filterValue
            });
        } else if (type_idx === idx){
            return Ext.create('Rally.data.wsapi.Filter', {
                property: this._getFilterFieldProperty(),
                value:this.filterValue
            });
        } else {
            return null;
        }
    },
    _getFilterFieldProperty: function(){
        //if (Rally.technicalservices.common.DashboardFilter.referenceFieldAttributes[this.filterField]){
        //    return this.filterField + '.' + Rally.technicalservices.common.DashboardFilter.referenceFieldAttributes[this.filterField];
        //}
        return this.filterField;
    },
    statics: {
        publishedEventName: 'dashboardFilterUpdated',
        requestEventName: 'requestDashboardFilter'
    }
});

Ext.define('Rally.technicalservices.WsapiToolbox', {
    singleton: true,
    fetchWsapiCount: function(model, query_filters){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: query_filters,
            limit: 1,
            pageSize: 1
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchModelTypePathByTypeDefinition: function(typeDef){
        var deferred = Ext.create('Deft.Deferred');
        var typeDefId = 0;
        if (typeDef){
            typeDefId = typeDef.replace('/typedefinition/','');
        }

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'TypeDefinition',
            fetch: ['TypePath','Name'],
            filters: [{
                property: 'ObjectID',
                value: typeDefId
            }]
        }).load({
            callback: function(records, operation, success){
                if (success && records && records.length > 0){
                    deferred.resolve(records[0].get('TypePath'));
                } else {
                    deferred.resolve(null); //(Ext.String.format("Error getting TypeDefinition for {1}: {0}", operation.error.errors.join(','), typeDef));
                }
            }
        });
        return deferred;
    },
    fetchWsapiRecords: function(model, query_filters, fetch_fields, context){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch_fields,
            filters: query_filters,
            context: context,
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchReleases: function(timebox){

        var deferred = Ext.create('Deft.Deferred'),
            rec = timebox.getRecord(),
            me = this;

        if (rec === null) {
            deferred.resolve([]);
        }

        Ext.create('Rally.data.wsapi.Store',{
            model: 'Release',
            fetch: ['ObjectID'],
            filters: [{
                property: 'Name',
                value: rec.get('Name')
            },{
                property: 'ReleaseStartDate',
                value: rec.get('ReleaseStartDate')
            },{
                property: 'ReleaseDate',
                value: rec.get('ReleaseDate')
            }],
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                }   else {
                    deferred.reject("Error loading Releases: " + operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },

    fetchAllowedValues: function(model,field_name) {
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: model,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var values = Ext.Array.map(records, function(record) {
                            return record.get('StringValue');
                        });
                        deferred.resolve(values);
                    }
                });
            },
            failure: function(msg) { deferred.reject('Error loading field values: ' + msg); }
        });
        return deferred;
    },
    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store', {
            model: 'TypeDefinition',
            fetch: ['TypePath', 'Ordinal','Name'],
            filters: [{
                property: 'TypePath',
                operator: 'contains',
                value: 'PortfolioItem/'
            }],
            sorters: [{
                property: 'Ordinal',
                direction: 'ASC'
            }]
        });
        store.load({
            callback: function(records, operation, success){
                if (success){
                    var portfolioItemTypes = new Array(records.length);
                    _.each(records, function(d){
                        //Use ordinal to make sure the lowest level portfolio item type is the first in the array.
                        var idx = Number(d.get('Ordinal'));
                        portfolioItemTypes[idx] = { typePath: d.get('TypePath'), name: d.get('Name') };
                        //portfolioItemTypes.reverse();
                    });
                    deferred.resolve(portfolioItemTypes);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    },
    fetchDoneStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = [];
                            for (var i=records.length - 1; i > 0; i--){
                                values.push(records[i].get('StringValue'));
                                if (records[i].get('StringValue') == "Accepted"){
                                    i = 0;
                                }
                            }
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },
    fetchTypeDefinition: function(typePath){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'TypeDefinition',
            fetch: ['TypePath','Name'],
            filters: [{
                property: 'TypePath',
                value: typePath
            }]
        }).load({
            callback: function(records, operation, success){
                if (success && records && records.length > 0){
                    deferred.resolve(records[0]);
                } else {
                    var message = "No records returned when loading Type Definition for " + typePath;
                    if (!success){
                        message = "Error loading Type Definition for " + typePath + ':  ' + operation.error.errors.join(',');
                    }
                    deferred.reject(message); //(Ext.String.format("Error getting TypeDefinition for {1}: {0}", operation.error.errors.join(','), typeDef));
                }
            }
        });
        return deferred;
    }
});

(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.technicalservices.Settings", {
        singleton: true,

        getSettings: function(context, config){
            var current_calculation_type = (config && config.calculationType) || 'storycount',
                labelWidth= 150,
                startDate = config.startdate || ["plannedstartdate",""],
                endDate = config.enddate || ["today",""];

            if (startDate && !(startDate instanceof Array)){
                startDate = startDate.split(",");
            }
            if (endDate && !(endDate instanceof Array)){
                endDate = endDate.split(",");
            }
            console.log('startdate,enddate',startDate, endDate);
            return [
                {
                    xtype: "fieldcontainer",
                    layout: {type: 'hbox'},
                    items: [{
                        xtype: "container",
                        minWidth: 250,
                        items: [
                            {
                                xtype: "label",
                                text: "Start Date",
                                cls: "settingsLabel"
                            },
                            {
                                xtype: "radiogroup",
                                name: "startdate",
                                itemId: "startdategroup",
                                columns: 1,
                                vertical: true,
                                items: [
                                    {
                                        name: "startdate",
                                        itemId: "actualstartdate",
                                        boxLabel: "Actual Start Date",
                                        baseLabel: "Actual Start Date",
                                        inputValue: "actualstartdate",
                                        checked: startDate[0] === "actualstartdate"
                                    },
                                    {
                                        name: "startdate",
                                        itemId: "plannedstartdate",
                                        boxLabel: "Planned Start Date",
                                        baseLabel: "Planned Start Date",
                                        inputValue: "plannedstartdate",
                                        checked: startDate[0] === "plannedstartdate"
                                    },
                                    {
                                        xtype: "container",
                                        layout: {
                                            type: "hbox"
                                        },
                                        items: [
                                            {
                                                xtype: "radiofield",
                                                name: "startdate",
                                                itemId: "startdatemanual",
                                                boxLabel: " ",
                                                inputValue: "selecteddate",
                                                checked: startDate[0] === "selecteddate"
                                            },
                                            {
                                                xtype: "rallydatefield",
                                                name: "startdate",
                                                itemId: "startdatefield",
                                                inputValue: "selecteddate",
                                                value: startDate[1] || ''
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: "container",
                                minWidth: 250,
                                items: [
                                    {
                                        xtype: "label",
                                        text: "End Date",
                                        cls: "settingsLabel"
                                    },
                                    {
                                        xtype: "radiogroup",
                                        name: "enddate",
                                        itemId: "enddategroup",
                                        columns: 1,
                                        vertical: true,
                                        items: [
                                            {
                                                name: "enddate",
                                                itemId: 'today',
                                                boxLabel: "Today",
                                                inputValue: "today",
                                                checked: endDate[0] === "today"
                                            },
                                            {
                                                name: "enddate",
                                                itemId: "actualenddate",
                                                boxLabel: "Actual End Date",
                                                baseLabel: "Actual End Date",
                                                inputValue: "actualenddate",
                                                checked: endDate[0] === "actualenddate"
                                            },
                                            {
                                                name: "enddate",
                                                itemId: "plannedenddate",
                                                boxLabel: "Planned End Date",
                                                baseLabel: "Planned End Date",
                                                inputValue: "plannedenddate",
                                                checked: endDate[0] === "plannedenddate"
                                            },
                                            {
                                                xtype: "container",
                                                layout: {
                                                    type: "hbox"
                                                },
                                                items: [
                                                    {
                                                        xtype: "radiofield",
                                                        name: "enddate",
                                                        itemId: "enddatemanual",
                                                        boxLabel: " ",
                                                        inputValue: "selecteddate",
                                                        checked: endDate[0] === "selecteddate"
                                                    },
                                                    {
                                                        xtype: "rallydatefield",
                                                        name: "enddate",
                                                        itemId: "enddatefield",
                                                        inputValue: "selecteddate",
                                                        value: endDate[1] || ""
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }]
                },{
                    xtype: 'radiogroup',
                    fieldLabel: 'Data Type',
                    columns: 1,
                    vertical: true,
                    labelWidth: labelWidth,
                    labelAlign: 'top',
                    labelCls: 'settingsLabel',
                    margin: '10 0 10 0',
                    items: [{
                        boxLabel: "Story Count",
                        name: 'calculationType',
                        inputValue: "storycount",
                        checked: "storycount" === current_calculation_type
                    }, {
                        boxLabel: "Story Plan Estimate",
                        name: 'calculationType',
                        inputValue: "storypoints",
                        checked: "storypoints" === current_calculation_type,
                        cls: "paddedSettingCmp"
                    }]
                }];
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.rpm.cfd.CumulativeFlowCalculator", {
        extend: "Rally.data.lookback.calculator.TimeSeriesCalculator",

        getDerivedFieldsOnInput: function () {
            var chartAggregationType = this.config.chartAggregationType;

            return _.map(this.config.scheduleStates, function(state) {
                return {
                    "as": state,
                    "f": function (snapshot) {
                        if (chartAggregationType === 'storycount') {
                            if (snapshot.ScheduleState) {
                                return snapshot.ScheduleState === state ? 1 : 0;
                            }

                            return 0;
                        } else {
                            if (snapshot.PlanEstimate) {
                                return snapshot.ScheduleState === state ? snapshot.PlanEstimate : 0;
                            }

                            return 0;
                        }

                    }
                };
            }, this);
        },

        getMetrics: function () {
            return _.map(this.config.scheduleStates, function(state) {
                return {
                    "field": state,
                    "as": state,
                    "f": "sum"
                };
            });
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.DateMixin", {

        dateFormatters: [
            {key: "MMM", value: "%b"},
            {key: "MM", value: "%m"},
            {key: "dd", value: "%d"},
            {key: "yyyy", value: "%Y"}
        ],

        dateToStringDisplay: function (date) {
            return Ext.Date.format(date, 'm/d/Y');
        },

        dateToString: function (date) {
            return Ext.Date.format(date, 'Y-m-d\\TH:i:s.u\\Z');
        },

        dateStringToObject: function (dateStr) {
            var finalIndex = dateStr.indexOf('T'),
                dateObj;

            if (finalIndex > -1) {
                dateStr = dateStr.slice(0, dateStr.indexOf('T'));
            }

            dateObj = this._splitDateParts(dateStr);

            return new Date(dateObj.year, dateObj.month, dateObj.day);
        },

        _splitDateParts: function (dateStr) {
            if (this._shouldSplitOnDash(dateStr)) {
                return this._objectFromYearFirstDate(dateStr.split('-'));
            }
            else {
                return this._objectFromMonthFirstDate(dateStr.split('/'));
            }
        },

        _objectFromYearFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[1] = (parseInt(dateArray[1], 10) - 1).toString();

            return {
                year: dateArray[0],
                month: dateArray[1],
                day: dateArray[2]
            };
        },

        _objectFromMonthFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[0] = (parseInt(dateArray[0], 10) - 1).toString();

            return {
                month: dateArray[0],
                day: dateArray[1],
                year: dateArray[2]
            };
        },

        _shouldSplitOnDash: function (dateStr) {
            return dateStr.split('-').length === 3;
        }

    });

}());
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.Colors", {
        // RGB values obtained from here: http://ux-blog.rallydev.com/?cat=23
        grey4: "#C0C0C0",  // $grey4
        orange: "#FF8200",  // $orange
        gold: "#F6A900",  // $gold
        yellow: "#FAD200",  // $yellow
        lime: "#8DC63F",  // $lime
        green_dk: "#1E7C00",  // $green_dk
        blue_link: "#337EC6",  // $blue_link
        blue: "#005EB8",  // $blue
        purple : "#7832A5",  // $purple,
        pink : "#DA1884",   // $pink,
        grey7 : "#666",

        cumulativeFlowColors : function() {
            return [
                this.grey4, this.orange, this.gold, this.yellow, this.lime, this.green_dk, this.blue_link, this.blue, this.purple, this.pink
            ];
        },

        burnLineColor : function (){ return this.blue; },
        burnColumnColor : function() { return this.lime; }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("pfv-cfd", {
        extend: "Rally.app.App",
        logger: new Rally.technicalservices.Logger(),
        cls: "portfolio-cfd-app",

        config: {
            defaultSettings: {
                //startDate: Rally.util.DateTime.add(new Date(), 'day', -30),
                //endDate: new Date(),
                calculationType: 'storycount'
            }
        },

        chartComponentConfig: {
            xtype: "rallychart",

            chartColors: Ext.create("Rally.apps.charts.Colors").cumulativeFlowColors(),

            queryErrorMessage: "No data to display.<br /><br />Most likely, stories are either not yet available or started for this portfolio item.",
            aggregationErrorMessage: "No data to display.<br /><br />Check the data type setting for displaying data based on count versus plan estimate.",

            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: {
                find: {
                    "_TypeHierarchy": 'HierarchicalRequirement', //-51038,
                    "Children": null
                },
                removeUnauthorizedSnapshots: true,
                compress: true,
                fetch: ["ScheduleState", "PlanEstimate"],
                hydrate: ["ScheduleState"],
                sort: {
                    "_ValidFrom": 1
                }
            },

            calculatorType: "Rally.apps.charts.rpm.cfd.CumulativeFlowCalculator",

            chartConfig: {
                chart: {
                    defaultSeriesType: "area",
                    zoomType: "xy"
                },
                xAxis: {
                    categories: [],
                    tickmarkPlacement: "on",
                    // tickInterval: 5,
                    title: {
                        text: "Days",
                        margin: 10
                    }
                },
                yAxis: [
                    {
                        title: {
                            text: "Count"
                        }
                    }
                ],
                tooltip: {
                    formatter: function () {
                        return "" + this.x + "<br />" + this.series.name + ": " + this.y;
                    }
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false,
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        groupPadding: 0.01
                    },
                    area: {
                        stacking: 'normal',
                        marker: {
                            enabled: false
                        }
                    }
                }
            }
        },
        settingsScope: "workspace",

        mixins: [
            'Rally.apps.charts.DateMixin'
        ],

        scheduleStates: ["Defined", "In-Progress", "Completed", "Accepted"],

        PI_SETTING: "portfolioItemPicker",



        items: [
            {
                xtype: 'container',
                itemId: 'header',
                cls: 'header'
            }
        ],

        getSettingsFields: function () {
            return Rally.technicalservices.Settings.getSettings(this.getContext(),this.getSettings());
        },

        launch: function () {
            this.addEvents(
                'updateBeforeRender',
                'updateAfterRender'
            );


            //  this._addHelpComponent();
            this._setDefaultConfigValues();
            this._setupUpdateBeforeRender();

            this.addComponents();

            //this._loadSavedPortfolioItem();
            //Ext.create('Rally.apps.charts.IntegrationHeaders',this).applyTo(this.chartComponentConfig.storeConfig);
        },
        addComponents: function(){

            if (this.headerContainer){
                this.headerContainer.destroy();
            }
            if (this.displayContainer){
                this.displayContainer.destroy();
            }

            if (!this._validateSettingsChoices()) {
                return this.owner && this.owner.showSettings();
            }

            this.headerContainer = this.add({xtype:'container',itemId:'header-ct', layout: {type: 'hbox'}});
            this.displayContainer = this.add({xtype:'container',itemId:'body-ct', tpl: '<tpl>{message}</tpl>'});

            this.subscribe(this, Rally.technicalservices.common.DashboardFilter.publishedEventName, this.updateDashboardFilter, this);
            this.publish(Rally.technicalservices.common.DashboardFilter.requestEventName, this);

        },
        updateDashboardFilter: function(dashboardSettings){
            this.logger.log('updateDashboardFilter', dashboardSettings);

            this.displayContainer.removeAll();

            this.dashboardFilter = dashboardSettings;

            if (!dashboardSettings) {
                this._noDashboardFilters();
                return;
            }
            var filter = dashboardSettings.getFilter(dashboardSettings.filterModelType, []);

            Ext.create('Rally.data.wsapi.Store',{
                model: dashboardSettings.filterModelType,
                fetch: ['ObjectID','PlannedStartDate','PlannedEndDate','ActualStartDate','ActualEndDate'],
                filters: filter,
                limit: 'Infinity'
            }).load({
                scope: this,
                callback: function(records, operation){
                    this.logger.log('updateDashboardFilter', records, operation, filter);
                    if (operation.wasSuccessful()){
                        this._loadUserStories(records);
                    } else {
                        this._setErrorTextMessage("Error retrieving Portfolio Items: " + operation.error.errors.join(','));
                    }
                }
            });
        },
        getOptions: function() {
            return [
                {
                    text: 'About...',
                    handler: this._launchInfo,
                    scope: this
                }
            ];
        },
        _launchInfo: function() {
            if ( this.about_dialog ) { this.about_dialog.destroy(); }
            this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
        },
        isExternal: function(){
            return typeof(this.getAppId()) == 'undefined';
        },
        onSettingsUpdate: function (settings){
            this.logger.log('onSettingsUpdate',settings);
            Ext.apply(this, settings);
            this.addComponents();
        },
        _setupUpdateBeforeRender: function () {
            this.chartComponentConfig.updateBeforeRender = this._setupDynamicHooksWithEvents(
                this.chartComponentConfig.updateBeforeRender,
                'updateBeforeRender'
            );

            this.chartComponentConfig.updateAfterRender = this._setupDynamicHooksWithEvents(
                this.chartComponentConfig.updateAfterRender,
                'updateAfterRender'
            );
        },

        _setupDynamicHooksWithEvents: function (func, event) {
            var self = this;

            return function () {
                self.fireEvent(event);
                if ('function' === typeof func) {
                    func.apply(this);
                }
            };
        },

        _setDefaultConfigValues: function () {
            var config = Ext.clone(this.chartComponentConfig);

            config.storeConfig.find = config.storeConfig.find || {};

            config.calculatorConfig = config.calculatorConfig || {};

            config.chartConfig = config.chartConfig || {};
            config.chartConfig.title = config.chartConfig.title || {};
            config.chartConfig.xAxis = config.chartConfig.xAxis || {};
            config.chartConfig.xAxis.type = config.chartConfig.xAxis.type || "datetime";
            config.chartConfig.yAxis = config.chartConfig.yAxis || [
                    {
                        title: {}
                    }
                ];

            this.chartComponentConfig = config;
        },

        _buildHelpComponent: function () {
            return Ext.create('Ext.Component', {
                renderTpl: Rally.util.Help.getIcon({
                    cls: Rally.util.Test.toBrowserTestCssClass(this.help.cls),
                    id: this.help.id
                })
            });
        },

        _validateSettingsChoices: function () {
            var startDate = this._getSettingStartDate(),
                endDate = this._getSettingEndDate(),
                dataType = this.getSetting("calculationType"),
                invalid = function (value) {
                    return !value || value === "undefined";
                };

            if (invalid(startDate) || invalid(endDate) || invalid(dataType)) {
                return false;
            }
            return true;
        },

        _getSettingStartDate: function() {
            this.logger.log('_getSettingStartDate',this.getSetting("startdate"),this.getSetting("startDate"))
            return this.getSetting("startdate") || this.getSetting("startDate");
        },

        _getSettingEndDate: function() {
            return this.getSetting("enddate") || this.getSetting("endDate");
        },

        _getSettingPortfolioItem: function() {
            var currentSetting = this.getSetting(this.PI_SETTING);
            if(currentSetting && currentSetting !== "undefined") {
                return currentSetting;
            }

            var previousSetting = this.getSetting("buttonchooser");
            if (previousSetting && previousSetting !== "undefined") {
                return Ext.JSON.decode(previousSetting).artifact._ref;
            }

            return "undefined";
        },

        _loadUserStories: function (records) {

            if (records && records.length > 0) {
                Rally.data.ModelFactory.getModel({
                    type: 'UserStory',
                    success: function (model) {
                        this._onUserStoryModelRetrieved(model, records);
                    },
                    scope: this
                });
            } else {
                this._setErrorTextMessage("A server error occurred, please refresh the page.");
            }
        },

        _onUserStoryModelRetrieved: function (model, portfolioItems) {
            var scheduleStateValues = model.getField('ScheduleState').getAllowedStringValues();
            this.chartComponentConfig.calculatorConfig.scheduleStates = scheduleStateValues;


            this._setDynamicConfigValues();
            this._calculateDateRange(portfolioItems);
            this._updateQueryConfig(portfolioItems);

            if (this.down('rallychart')){
                this.down('rallychart').destroy();
            }
            this._setErrorTextMessage(null);

            this.add(this.chartComponentConfig);
            Rally.environment.getMessageBus().publish(Rally.Message.piChartAppReady);
        },

        _setDynamicConfigValues: function () {
            this._updateChartConfigDateFormat();
            this.chartComponentConfig.chartConfig.title = this._buildChartTitle(this.dashboardFilter);
            this.chartComponentConfig.chartConfig.subtitle = this._buildChartSubtitle(this.dashboardFilter);

            this.chartComponentConfig.calculatorConfig.chartAggregationType = this._getAggregationType();
            this.chartComponentConfig.chartConfig.yAxis[0].title.text = this._getYAxisTitle();

            this.chartComponentConfig.chartConfig.yAxis[0].labels = {
                x: -5,
                y: 4
            };
        },

        _updateChartConfigDateFormat: function () {
            var self = this;

            this.chartComponentConfig.chartConfig.xAxis.labels = {
                x: 0,
                y: 20,
                formatter: function () {
                    return self._formatDate(self.dateStringToObject(this.value));
                }
            };
        },

        _formatDate: function (date) {
            var dateFormat = this._getUserConfiguredDateFormat() || this._getWorkspaceConfiguredDateFormat();

            return Rally.util.DateTime.format(date, dateFormat);
        },

        _getMinMaxDates: function(portfolioItems){
            var startFields = ['PlannedStartDate','ActualStartDate'],
                endFields = ['PlannedEndDate','ActualEndDate'],
                dates = {
                PlannedStartDate: null,
                ActualStartDate: null,
                PlannedEndDate: null,
                ActualEndDate: null,
            };

            Ext.Array.each(portfolioItems, function(p){
                Ext.Array.each(startFields, function(sf){
                    var s = p.get(sf);
                    if (s){
                        if (dates[sf] === null || s < dates[sf]){
                            dates[sf] = s;
                        }
                    }
                });
                Ext.Array.each(endFields, function(ef){
                    var e = p.get(ef);
                    if (e){
                        if (dates[ef] === null || e < dates[ef]){
                            dates[ef] = e;
                        }
                    }
                });
            });

            this.logger.log('_getMinMaxDates', dates);
            return dates;
        },

        _calculateDateRange: function (portfolioItems) {

            var portfolioDates = this._getMinMaxDates(portfolioItems);

            var calcConfig = this.chartComponentConfig.calculatorConfig;
            calcConfig.startDate = calcConfig.startDate || this._getChartStartDate(portfolioDates);
            calcConfig.endDate = calcConfig.endDate || this._getChartEndDate(portfolioDates);
            calcConfig.timeZone = calcConfig.timeZone || this._getTimeZone();

            this.chartComponentConfig.chartConfig.xAxis.tickInterval = this._configureChartTicks(calcConfig.startDate, calcConfig.endDate);
        },

        _updateQueryConfig: function (portfolioItems) {
            var portfolioItemOids = _.map(portfolioItems, function(p){ return p.get('ObjectID'); });
            this.chartComponentConfig.storeConfig.find._ItemHierarchy = {"$in": portfolioItemOids};
        },

        _configureChartTicks: function (startDate, endDate) {
            var pixelTickWidth = 125,
                appWidth = this.getWidth(),
                ticks = Math.floor(appWidth / pixelTickWidth);

            var startDateObj = this.dateStringToObject(startDate),
                endDateObj = this.dateStringToObject(endDate);

            var days = Math.floor((endDateObj.getTime() - startDateObj.getTime()) / 86400000);

            return Math.floor(days / ticks);
        },

        _getUserConfiguredDateFormat: function () {
            return this.getContext().getUser().UserProfile.DateFormat;
        },

        _getWorkspaceConfiguredDateFormat: function () {
            return this.getContext().getWorkspace().WorkspaceConfiguration.DateFormat;
        },

        _buildChartTitle: function (dashboardFilter) {
            var widthPerCharacter = 10,
                totalCharacters = Math.floor(this.getWidth() / widthPerCharacter),
                title = "Portfolio Item Chart",
                align = "center";

            if (dashboardFilter) {
                title = 'Portfolio Item ' + dashboardFilter.filterFieldDisplayName + " = " + dashboardFilter.filterValue;
            }

            if (totalCharacters < title.length) {
                title = title.substring(0, totalCharacters) + "...";
                align = "left";
            }

            return {
                text: null
                //text: title,
                //align: align,
                //margin: 30
            };
        },

        _buildChartSubtitle: function () {

            return {
                text: null,
                useHTML: true,
                align: "center"
            };
        },

        _getAggregationType: function () {
            return this.getSetting("calculationType");
        },

        _getYAxisTitle: function () {
            return this._getAggregationType() === "storypoints" ?
                "Points" :
                "Count";
        },

        _getChartStartDate: function (portfolioDates) {
            this.logger.log('_getChartStartDate', portfolioDates);
            var startDateSetting = this._getSettingStartDate().split(","),
                settingValue = startDateSetting[0],
                startDate;

            if(startDateSetting[0] === "selecteddate") {
                startDate = this.dateStringToObject(startDateSetting[1]);
            } else {
                startDate = this._dateFromSettingValue(portfolioDates, settingValue);
            }
            this.logger.log('_getChartStartDate', startDate);

            return this.dateToString(startDate);
        },

        _getChartEndDate: function (portfolioDates) {
            var endDateSetting = this._getSettingEndDate().split(","),
                settingValue = endDateSetting[0],
                endDate;

            if (endDateSetting[0] === "selecteddate") {
                endDate = this.dateStringToObject(endDateSetting[1]);
            } else {
                endDate = this._dateFromSettingValue(portfolioDates, settingValue);
            }

            if (!endDate){
                endDate = new Date();
            }

            this.logger.log('_getChartEndDate', endDate);
            return this.dateToString(endDate);
        },

        _dateFromSettingValue: function (dates, settingValue) {
            var settingsMap = {
                "plannedstartdate": "PlannedStartDate",
                "plannedenddate": "PlannedEndDate",
                "actualstartdate": "ActualStartDate",
                "actualenddate": "ActualEndDate"
            };

            if (settingValue === "today") {
                return new Date();
            }
            this.logger.log('_dateFromSettingValue', settingValue);

            if (settingsMap.hasOwnProperty(settingValue)) {
                this.logger.log('_dateFromSettingValue', dates[settingsMap[settingValue]]);
                return dates[settingsMap[settingValue]];
            }

            return new Date(settingValue);
        },
        _getTimeZone: function () {
            return this.getContext().getUser().UserProfile.TimeZone || this.getContext().getWorkspace().WorkspaceConfiguration.TimeZone;
        },

        _noDashboardFilters: function () {
            this._setErrorTextMessage('No Dashboard Filters specified.');
        },

        _setErrorTextMessage: function (message) {
            if (this.down('#errorMessage')){
                this.down('#errorMessage').destroy();
            }
            if (message){
                this.add({
                    xtype: 'displayfield',
                    itemId: 'errorMessage',
                    value: message
                });
            }
        }
    });
}());
            
               Rally.launchApp('pfv-cfd', {
                   name: 'Portfolio Cumulative Flow'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.settingsLabel {
    font-family: NotoSansBold, Helvetica, Arial;
    font-weight: normal;
    min-height: 20px;
    text-transform: uppercase;
}

.settingsSubLabel {
    font-family: NotoSans, Helvetica, Arial;
    font-weight: normal;
    font-size: 10px;
    font-style: italic;
    float: right;
    align: right;
    text-align: right;
    color: #666666;
}
    </style>

</head>
<body></body>
</html>